{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions .jsx","components/Satistics/Satistics.jsx","components/Notification/Notification.jsx","components/App/App.styled.jsx","components/App/App.jsx","index.js"],"names":["Section","title","FeedbackOptions","options","onLeaveFeedback","map","option","name","onClick","e","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Container","styled","div","App","useState","setGoodOption","setNeutralOption","setBadOption","countTotalFeedback","event","target","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPACaA,EAAU,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxB,OACE,mCACE,6BAAKA,OCHEC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OACE,mCACED,EAAQE,KAAI,SAACC,GACX,OACE,wBAAqBC,KAAMD,EAAQE,QAAS,SAACC,GAAML,EAAgBK,IAAnE,SACGH,GADUA,SCLVI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACtD,OACE,qCACE,4CACA,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,EAAX,OACA,oDAAuBC,EAAvB,WCROC,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC1B,OACI,4BAAIA,K,OCDCC,E,KAAYC,EAAOC,IAAV,sICKf,SAASC,IACd,MAA8BC,mBAAS,GAAvC,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAAoCD,mBAAS,GAA7C,mBAAOV,EAAP,KAAgBY,EAAhB,KACA,EAA4BF,mBAAS,GAArC,mBAAOT,EAAP,KAAYY,EAAZ,KAmBMC,EAAqB,WACzB,OAAOf,EAAOC,EAAUC,GAO1B,OACE,eAACK,EAAD,WACE,cAAC,EAAD,CAASjB,MAAM,2BACf,cAAC,EAAD,CAAiBE,QA5BL,CAAC,OAAQ,UAAW,OA4BGC,gBA1BjB,SAACuB,GACnB,OAAQA,EAAMC,OAAOrB,MACrB,IAAK,OACH,OAAOgB,EAAcZ,EAAO,GAE9B,IAAK,UACH,OAAOa,EAAiBZ,EAAU,GAEpC,IAAK,MACH,OAAOa,EAAaZ,EAAM,GAE5B,QACE,WAeDa,IACC,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,IACPX,oBAbGJ,EAAOe,IAAwB,KAAKG,QAAQ,KAgBjD,cAAC,EAAD,CAAcZ,QAAQ,yBC7C9Ba,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACX,EAAD,MAEFY,SAASC,eAAe,W","file":"static/js/main.bc966060.chunk.js","sourcesContent":["import propTypes from \"prop-types\";\r\nexport const Section = ({ title }) => {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n    </>\r\n  );\r\n};\r\nSection.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n};\r\n","import propTypes from \"prop-types\";\r\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n     {options.map((option) => {\r\n        return (\r\n          <button key={option} name={option} onClick={(e)=> {onLeaveFeedback(e)}}>\r\n            {option}\r\n          </button>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\nFeedbackOptions.propTypes = {\r\n  options: propTypes.array.isRequired,\r\n  onLeaveFeedback: propTypes.func.isRequired,\r\n};\r\n","import propTypes from 'prop-types';\r\nexport const Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <h2>Statistics</h2>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total} </p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: propTypes.number.isRequired,\r\n  neutral: propTypes.number.isRequired,\r\n  bad: propTypes.number.isRequired,\r\n  total:  propTypes.number.isRequired,\r\n  positivePercentage:  propTypes.string.isRequired\r\n}","import propTypes from 'prop-types';\r\nexport const Notification = ({message}) => {\r\n    return (\r\n        <p>{message}</p>\r\n    )\r\n}\r\nNotification.propTypes = {\r\n    message: propTypes.string.isRequired\r\n}","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\nheight: auto;\r\nmargin: 0  auto;\r\ntext-align: center;\r\npadding: 50px 0 500px;\r\nbackground-color: #FED99D;\r\n`","import { useState } from \"react\";\r\nimport { Section } from \"../Section/Section\";\r\nimport { FeedbackOptions } from \"../FeedbackOptions/FeedbackOptions \";\r\nimport { Statistics } from \"../Satistics/Satistics\";\r\nimport { Notification } from \"../Notification/Notification\";\r\nimport { Container } from \"./App.styled\";\r\n\r\nexport function App() {\r\n  const [good, setGoodOption] = useState(0);\r\n  const [neutral, setNeutralOption] = useState(0);\r\n  const [bad, setBadOption] = useState(0);\r\n\r\n  const options = [\"good\", \"neutral\", \"bad\"];\r\n\r\n  const leaveFeedback = (event) => {\r\n      switch (event.target.name) {\r\n      case \"good\":\r\n        return setGoodOption(good + 1);\r\n\r\n      case \"neutral\":\r\n        return setNeutralOption(neutral + 1);\r\n\r\n      case \"bad\":\r\n        return setBadOption(bad + 1);\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return ((good / countTotalFeedback()) * 100).toFixed(2);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Section title=\"Please, leave feedback\" />\r\n      <FeedbackOptions options={options} onLeaveFeedback={leaveFeedback} />\r\n      {countTotalFeedback() ? (\r\n        <Statistics\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={countTotalFeedback()}\r\n          positivePercentage={countPositiveFeedbackPercentage()}\r\n        />\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}